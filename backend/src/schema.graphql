scalar DateTime

type SuccessMessage {
  message: String
}

type Query {
  me: User
}

type Event {
  eventId: String!
  users: [User!]
}

type User {
  id: ID!
  email: String!
  password: String!
  name: String
  events: [Event!]
  lists: [List!]!
}

type Place {
  id: ID!
  placeId: String!
  list: List!
}

type List {
  id: ID!
  title: String!
  user: User!
  places: [Place]
}

type AuthPayload {
  token: String!
  user: User!
}

type Mutation {
  signup(email: String!, password: String!, name: String): AuthPayload!
  signin(email: String!, password: String!): AuthPayload!
  signout: SuccessMessage
  addEvent(eventId: String!): Event
  removeEvent(eventId: String!): Event
  createList(title: String!, placeId: String!): List!
}
